Assignment-1: Calculate Simple Interest 
Objective: Use variables and arithmetic expressions inside a PL/SQL block. 
Requirements: 
1. Declare three variables: 
o p (principal) 
o r (rate of interest) 
o t (time in years) 
2. Compute Simple Interest using: 
SI = (ùíë ‚àó ùíì ‚àó ùíï)/ùüèùüéùüé 
 
3. Display the result using DBMS_OUTPUT.PUT_LINE. 

DECLARE
p NUMBER := 10000;  
r NUMBER := 5;      
t NUMBER := 2;      
si NUMBER;          
BEGIN
si := (p * r * t) / 100;
DBMS_OUTPUT.PUT_LINE('Simple Interest = ' || si);
END;





Assignment 2: Employee Bonus Calculation 
Objective: Practice variable declaration and IF conditions. 
Requirements: 
1. Declare variables: 
o emp_name VARCHAR2(50) 
o salary NUMBER 
o bonus NUMBER 
2. Assign values to emp_name and salary. 
3. Use conditions: 
o If salary > 50000 ‚Üí bonus = 0.10 √ó salary 
o Else ‚Üí bonus = 0.15 √ó salary 
4. Display employee name, salary, and bonus. 

DECLARE
emp_name VARCHAR2(50) := 'John Doe';
salary   NUMBER := 60000;
bonus    NUMBER;
BEGIN
IF salary > 50000 THEN
bonus := 0.10 * salary;
ELSE
bonus := 0.15 * salary;
END IF;
DBMS_OUTPUT.PUT_LINE('Employee Name: ' || emp_name);
DBMS_OUTPUT.PUT_LINE('Salary: ' || salary);
DBMS_OUTPUT.PUT_LINE('Bonus: ' || bonus); 
END;






Assignment-3: Retrieve and Display Department Details 
Objective: Use %ROWTYPE with a WHERE clause. 
Requirements: 
1. Declare a variable v_dept of type DEPARTMENTS%ROWTYPE. 
2. Take a sample department ID in variable 
3. Fetch the corresponding record into v_dept. 
4. Display department name and location 

DECLARE
v_dept DEPARTMENTS%ROWTYPE;
v_dept_id DEPARTMENTS.DEPARTMENT_ID%TYPE := 10; 
BEGIN
SELECT * INTO v_dept
FROM DEPARTMENTS
WHERE DEPARTMENT_ID = v_dept_id;
DBMS_OUTPUT.PUT_LINE('Department Name: ' || v_dept.DEPARTMENT_NAME);
DBMS_OUTPUT.PUT_LINE('Location ID: ' || v_dept.LOCATION_ID); 
END;








Assignment 4: Student Marks Management 
Create a PL/SQL block using an associa∆üve array indexed by VARCHAR2 to store students‚Äô marks and 
calculate their average score. 
 Requirements: 
1. Use an associa∆üve array where:
o Key ‚Üí Student Name 
o Value ‚Üí Marks (NUMBER) 
2. Insert marks for at least 5 students. 
3. Display all student names with their marks. 
4. Calculate and print: 
o Total marks 
o Average marks 
 Hint: Use .FIRST, .NEXT for itera∆üon. 

DECLARE
TYPE marks_table IS TABLE OF NUMBER INDEX BY VARCHAR2(50);
student_marks marks_table;
student_name  VARCHAR2(50);
total_marks   NUMBER := 0;
count_students NUMBER := 0;
avg_marks     NUMBER;
BEGIN

student_marks('Alice') := 85;
student_marks('Bob') := 90;
student_marks('Charlie') := 78;
student_marks('David') := 92;
student_marks('Eve') := 88;

student_name := student_marks.FIRST;
WHILE student_name IS NOT NULL LOOP
    DBMS_OUTPUT.PUT_LINE(student_name || ' = ' || student_marks(student_name));
    total_marks := total_marks + student_marks(student_name);
    count_students := count_students + 1;
    student_name := student_marks.NEXT(student_name);
END LOOP;

avg_marks := total_marks / count_students;

DBMS_OUTPUT.PUT_LINE('Total Marks = ' || total_marks);
DBMS_OUTPUT.PUT_LINE('Average Marks = ' || avg_marks); 
END;










Assignment 5: Country‚ÄìCapital Lookup 
Objec∆üve: Use an associa∆üve array indexed by VARCHAR2 to perform lookups.
Requirements: 
1. Declare an associa∆üve array with:
o Key ‚Üí Country Name 
o Value ‚Üí Capital City 
2. Insert at least 6 country‚Äìcapital pairs. 
3. Ask the user for a country name (using &country subs∆ütu∆üon variable).
4. Display: 
o The capital if the country exists. 
o A message ‚ÄúCountry not found‚Äù otherwise. 
 Hint: Use EXISTS(key) to check if the element is in the associa∆üve array

DECLARE
TYPE country_capital_table IS TABLE OF VARCHAR2(50) INDEX BY VARCHAR2(50);
country_capital country_capital_table;
country VARCHAR2(50);
BEGIN

country_capital('India') := 'New Delhi';
country_capital('USA') := 'Washington D.C.';
country_capital('UK') := 'London';
country_capital('France') := 'Paris';
country_capital('Japan') := 'Tokyo';
country_capital('Germany') := 'Berlin';

country := '&country';

IF country_capital.EXISTS(country) THEN
    DBMS_OUTPUT.PUT_LINE('Capital of ' || country || ' is ' || country_capital(country));
ELSE
    DBMS_OUTPUT.PUT_LINE('Country not found.');
END IF;
END;




